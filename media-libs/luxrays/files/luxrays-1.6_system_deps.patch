--- a/cmake/Dependencies.cmake	2022-10-18 19:08:30.925991707 +0200
+++ z/cmake/Dependencies.cmake	2022-10-18 19:08:39.817991390 +0200
@@ -16,14 +16,15 @@
 # limitations under the License.
 ################################################################################
 
-include(FindPkgMacros)
-getenv_path(LuxRays_DEPENDENCIES_DIR)
+#include(FindPkgMacros)
+#getenv_path(LuxRays_DEPENDENCIES_DIR)
 
 ################################################################################
 #
 # Core dependencies
 #
 ################################################################################
+set(PythonVersion "" CACHE STRING "Targeted python version") 
 
 # Find threading library
 find_package(Threads REQUIRED)
@@ -27,26 +28,15 @@
 
 # Find threading library
 find_package(Threads REQUIRED)
-
 find_package(OpenImageIO REQUIRED)
-include_directories(BEFORE SYSTEM ${OPENIMAGEIO_INCLUDE_DIR})
 find_package(OpenEXR REQUIRED)
-
-if(NOT APPLE)
-    # Apple has these available hardcoded and matched in macos repo, see Config_OSX.cmake
-
-    include_directories(BEFORE SYSTEM ${OPENEXR_INCLUDE_DIRS})
-    find_package(TIFF REQUIRED)
-    include_directories(BEFORE SYSTEM ${TIFF_INCLUDE_DIR})
-    find_package(JPEG REQUIRED)
-    include_directories(BEFORE SYSTEM ${JPEG_INCLUDE_DIR})
-    find_package(PNG REQUIRED)
-    include_directories(BEFORE SYSTEM ${PNG_PNG_INCLUDE_DIR})
-	# Find Python Libraries
-	find_package(PythonLibs)
-endif()
-
-include_directories(${PYTHON_INCLUDE_DIRS})
+find_package(TIFF REQUIRED)
+find_package(JPEG REQUIRED)
+find_package(PNG REQUIRED)
+
+if(LUXRAYS_PYTHON)
+	find_package(Python ${PythonVersion} EXACT COMPONENTS Interpreter Development)
+endif(LUXRAYS_PYTHON)
 
 # Find Boost
 set(Boost_USE_STATIC_LIBS       OFF)
@@ -56,9 +46,8 @@
 #set(Boost_DEBUG                 ON)
 set(Boost_MINIMUM_VERSION       "1.44.0")
 
-set(Boost_ADDITIONAL_VERSIONS "1.47.0" "1.46.1" "1.46" "1.46.0" "1.45" "1.45.0" "1.44" "1.44.0")
+set(LUXRAYS_BOOST_COMPONENTS thread filesystem serialization iostreams chrono)
 
-set(LUXRAYS_BOOST_COMPONENTS thread program_options filesystem serialization iostreams regex system python chrono)
 find_package(Boost ${Boost_MINIMUM_VERSION} COMPONENTS ${LUXRAYS_BOOST_COMPONENTS})
 if (NOT Boost_FOUND)
         # Try again with the other type of libs
@@ -71,6 +60,7 @@
 endif()
 
 if (Boost_FOUND)
+	message(STATUS "Boost found ${Boost_VERSION}")
 	include_directories(BEFORE SYSTEM ${Boost_INCLUDE_DIRS})
 	link_directories(${Boost_LIBRARY_DIRS})
 	# Don't use old boost versions interfaces
@@ -81,59 +71,28 @@
 	endif()
 endif ()
 
-
+if(LUXRAYS_SAMPLES OR LUXRAYS_LUXCOREUI)
 # OpenGL
-find_package(OpenGL)
-
-if (OPENGL_FOUND)
-	include_directories(BEFORE SYSTEM ${OPENGL_INCLUDE_PATH})
-endif()
-
-set(GLEW_ROOT                  "${GLEW_SEARCH_PATH}")
-if(NOT APPLE)
-	find_package(GLEW)
-endif()
-
-# GLEW
-if (GLEW_FOUND)
-	include_directories(BEFORE SYSTEM ${GLEW_INCLUDE_PATH})
-endif ()
-
-set(GLUT_ROOT                  "${GLUT_SEARCH_PATH}")
-find_package(GLUT)
-
-# GLUT
-if (GLUT_FOUND)
-	include_directories(BEFORE SYSTEM ${GLUT_INCLUDE_PATH})
-endif ()
+	find_package(OpenGL REQUIRED)
+	find_package(GLEW REQUIRED)
+	find_package(GLUT REQUIRED)
+	endif(LUXRAYS_SAMPLES OR LUXRAYS_LUXCOREUI)
 
+if(NOT LUXRAYS_DISABLE_OPENCL)
 # OpenCL
-set(OPENCL_ROOT                "${OPENCL_SEARCH_PATH}")
-find_package(OpenCL)
-
-if (OPENCL_FOUND)
-	include_directories(BEFORE SYSTEM ${OPENCL_INCLUDE_DIR} ${OPENCL_C_INCLUDE_DIR})
-endif ()
+	find_package(OpenCL REQUIRED)
+endif(NOT LUXRAYS_DISABLE_OPENCL)
 
 # Intel Embree
-set(EMBREE_ROOT                "${EMBREE_SEARCH_PATH}")
-find_package(Embree)
-
-if (EMBREE_FOUND)
-	include_directories(BEFORE SYSTEM ${EMBREE_INCLUDE_PATH})
-endif ()
+find_package(Embree 3 REQUIRED)
 
 # OpenMP
-if(NOT APPLE)
-	find_package(OpenMP)
-	if (OPENMP_FOUND)
-		MESSAGE(STATUS "OpenMP found - compiling with")
-   		set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
-   		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
-	else()
-		MESSAGE(WARNING "OpenMP not found - compiling without")
-	endif()
-endif()
+if(LUXRAYS_OPENMP)
+find_package(OpenMP REQUIRED)
+MESSAGE(STATUS "OpenMP found - compiling with")
+set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
+endif(LUXRAYS_OPENMP)
 
 # Find GTK 3.0 for Linux only (required by luxcoreui NFD)
 if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
@@ -143,19 +102,7 @@
 endif()
 
 # Find BISON
-IF (NOT BISON_NOT_AVAILABLE)
-	find_package(BISON)
-	IF (NOT BISON_FOUND)
-		MESSAGE(WARNING "bison not found - try compilation using already generated files")
-		SET(BISON_NOT_AVAILABLE 1)
-	ENDIF (NOT BISON_FOUND)
-ENDIF (NOT BISON_NOT_AVAILABLE)
+find_package(BISON REQUIRED)
 
 # Find FLEX
-IF (NOT FLEX_NOT_AVAILABLE)
-	find_package(FLEX)
-	IF (NOT FLEX_FOUND)
-		MESSAGE(WARNING "flex not found - try compilation using already generated files")
-		SET(FLEX_NOT_AVAILABLE 1)
-	ENDIF (NOT FLEX_FOUND)
-ENDIF (NOT FLEX_NOT_AVAILABLE)
+find_package(FLEX REQUIRED)
--- a/CMakeLists.txt	2022-10-18 19:08:30.924991707 +0200
+++ z/CMakeLists.txt	2022-10-18 19:08:39.888991388 +0200
@@ -25,11 +25,15 @@
 #
 ################################################################################
 # Fresh start
-cmake_minimum_required(VERSION 2.8)
-cmake_policy(VERSION 2.8)
-#Remove the following when the version check is at least 2.8.4
-SET(CMAKE_LEGACY_CYGWIN_WIN32 0)
+cmake_minimum_required(VERSION 3.20)
+cmake_policy(VERSION 3.20)
 
+include(CMakeDependentOption)
+
+option(LUXRAYS_SAMPLES "Build samples" OFF)
+option(LUXRAYS_LUXCOREUI "Build samples" OFF)
+option(LUXRAYS_PYTHON "Build pyluxcore library" OFF)
+option(LUXRAYS_OPENMP "Build with OpenMP library" ON)
 project(LuxRays)
 
 # Don't over-configure
@@ -54,9 +58,9 @@
 # cmake does need to know which of the possible configurations
 # to generate
 if(NOT CMAKE_BUILD_TYPE)
-	set(CMAKE_BUILD_TYPE Release)
+#_cmake_modify_IGNORE 	set(CMAKE_BUILD_TYPE Release)
 endif(NOT CMAKE_BUILD_TYPE)
-SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "assure config" FORCE) # makes sure type is shown in cmake gui
+#_cmake_modify_IGNORE SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "assure config" FORCE) # makes sure type is shown in cmake gui
 
 message(STATUS "Building mode: " ${CMAKE_BUILD_TYPE})
 
@@ -64,8 +68,6 @@
 INCLUDE(Configuration)
 INCLUDE(KernelPreprocess)
 
-# Install CMake modules
-#add_subdirectory(CMake)
 
 SET(LuxRays_INCLUDE_DIR "${LuxRays_SOURCE_DIR}/include")
 include_directories("${LuxRays_INCLUDE_DIR}")
@@ -73,36 +75,6 @@
 # Find dependencies
 include(Dependencies)
 
-if (NOT Boost_FOUND)
-	MESSAGE(FATAL_ERROR "--> Could not locate required Boost files - Please check ${BOOST_SEARCH_PATH}")
-endif()
-
-if (NOT OPENIMAGEIO_FOUND)
-	MESSAGE(FATAL_ERROR "--> Could not locate required OpenImageIO files - Please check ${OPENIMAGEIO_SEARCH_PATH}")
-endif()
-
-if (NOT OPENCL_FOUND AND NOT LUXRAYS_DISABLE_OPENCL)
-	MESSAGE(ERROR "--> Could not locate required OpenCL files, disabling OpenCL support - Please check ${OPENCL_SEARCH_PATH}")
-	SET(LUXRAYS_DISABLE_OPENCL 1)
-endif()
-
-if (NOT OPENGL_FOUND AND NOT LUXRAYS_DISABLE_OPENCL)
-	MESSAGE(ERROR "--> Could not locate required OpenGL files, disabling OpenCL support, disabling samples build")
-	SET(LUXRAYS_DISABLE_OPENCL 1)
-endif()
-
-if (NOT GLEW_FOUND)
-	MESSAGE(FATAL_ERROR "--> Could not locate required GLEW files, disabling samples build - Please check ${GLEW_SEARCH_PATH}")
-endif()
-
-if (NOT GLUT_FOUND)
-	MESSAGE(FATAL_ERROR "--> Could not locate required GLUT files, disabling samples build - Please check ${GLUT_SEARCH_PATH}")
-endif()
-
-if (NOT EMBREE_FOUND)
-	MESSAGE(FATAL_ERROR "--> Could not locate required Intel Embree files - Please check ${EMBREE_SEARCH_PATH}")
-endif()
-
 if (LUXRAYS_DISABLE_OPENCL)
 	ADD_DEFINITIONS("-DLUXRAYS_DISABLE_OPENCL")
 endif()
@@ -128,22 +100,17 @@
 #
 ################################################################################
 
-if(NOT APPLE OR OSX_BUILD_DEMOS)
-	add_subdirectory(samples/benchsimple)
+if(LUXRAYS_SAMPLES)
+	add_subdirectory(samples/luxcoreconsole)
 	add_subdirectory(samples/luxcoredemo)
-	add_subdirectory(samples/luxcorescenedemo)
 	add_subdirectory(samples/luxcoreimplserializationdemo)
-endif()
-
-if(OPENGL_FOUND AND GLUT_FOUND AND GLEW_FOUND)
+	add_subdirectory(samples/luxcorescenedemo)
+	add_subdirectory(samples/benchsimple)
 	add_subdirectory(samples/smallluxgpu4)
-endif(OPENGL_FOUND AND GLUT_FOUND AND GLEW_FOUND)
-
-add_subdirectory(samples/luxcoreconsole)
-if(OPENGL_FOUND)
+endif(LUXRAYS_SAMPLES)
+if(LUXRAYS_LUXCOREUI)
 	add_subdirectory(samples/luxcoreui)
-endif(OPENGL_FOUND)
-
+endif(LUXRAYS_LUXCOREUI)
 
 ################################################################################
 #
@@ -152,3 +119,14 @@
 ################################################################################
 
 INCLUDE(AssembleBinDirs)
+
+message(STATUS "<<< Gentoo configuration >>>
+Build type      ${CMAKE_BUILD_TYPE}
+Install path    ${CMAKE_INSTALL_PREFIX}
+Compiler flags:
+C               ${CMAKE_C_FLAGS}
+C++             ${CMAKE_CXX_FLAGS}
+Linker flags:
+Executable      ${CMAKE_EXE_LINKER_FLAGS}
+Module          ${CMAKE_MODULE_LINKER_FLAGS}
+Shared          ${CMAKE_SHARED_LINKER_FLAGS}\n")
--- a/samples/benchsimple/CMakeLists.txt	2022-10-18 19:08:30.945991706 +0200
+++ z/samples/benchsimple/CMakeLists.txt	2022-10-18 19:08:39.834991389 +0200
@@ -19,6 +19,6 @@
 include_directories(${LuxRays_INCLUDE_DIR})
 link_directories (${LuxRays_LIB_DIR})
 
-add_executable(benchsimple benchsimple.cpp)
+add_executable(benchsimple benchsimple.cpp)
 add_definitions(${VISIBILITY_FLAGS})
-target_link_libraries(benchsimple luxrays ${EMBREE_LIBRARY})
+target_link_libraries(benchsimple luxrays OpenGL::GLX OpenCL::OpenCL embree)
--- a/samples/luxcoreconsole/CMakeLists.txt	2022-10-18 19:08:30.945991706 +0200
+++ z/samples/luxcoreconsole/CMakeLists.txt	2022-10-18 19:08:39.835991389 +0200
@@ -26,6 +26,6 @@
 	luxcoreconsole.cpp
 	)
 
-add_executable(luxcoreconsole ${LUXCORECONSOLE_SRCS})
+add_executable(luxcoreconsole ${LUXCORECONSOLE_SRCS})
 
-TARGET_LINK_LIBRARIES(luxcoreconsole luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+TARGET_LINK_LIBRARIES(luxcoreconsole luxcore smallluxgpu luxrays OpenGL::GLX TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG OpenCL::OpenCL OpenImageIO::OpenImageIO embree)
--- a/samples/luxcoredemo/CMakeLists.txt	2022-10-18 19:08:30.945991706 +0200
+++ z/samples/luxcoredemo/CMakeLists.txt	2022-10-18 19:08:39.835991389 +0200
@@ -26,7 +26,7 @@
 	luxcoredemo.cpp
 	)
 
-add_executable(luxcoredemo ${LUXCORELIBDEMO_SRCS})
+add_executable(luxcoredemo ${LUXCORELIBDEMO_SRCS})
 add_definitions(${VISIBILITY_FLAGS})
 
-TARGET_LINK_LIBRARIES(luxcoredemo luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+TARGET_LINK_LIBRARIES(luxcoredemo luxcore smallluxgpu luxrays OpenGL::GLX TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG OpenCL::OpenCL OpenImageIO::OpenImageIO embree)
--- a/samples/luxcoreimplserializationdemo/CMakeLists.txt	2022-10-18 19:08:30.945991706 +0200
+++ z/samples/luxcoreimplserializationdemo/CMakeLists.txt	2022-10-18 19:08:39.835991389 +0200
@@ -26,6 +26,6 @@
 	luxcoreimplserializationdemo.cpp
 	)
 
-add_executable(luxcoreimplserializationdemo ${LUXCOREIMPL_SERIALIZATIONDEMO_SRCS})
+add_executable(luxcoreimplserializationdemo ${LUXCOREIMPL_SERIALIZATIONDEMO_SRCS})
 
-TARGET_LINK_LIBRARIES(luxcoreimplserializationdemo luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+TARGET_LINK_LIBRARIES(luxcoreimplserializationdemo luxcore smallluxgpu luxrays OpenGL::GLX TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG OpenCL::OpenCL OpenImageIO::OpenImageIO embree)
--- a/samples/luxcorescenedemo/CMakeLists.txt	2022-10-18 19:08:30.945991706 +0200
+++ z/samples/luxcorescenedemo/CMakeLists.txt	2022-10-18 19:08:39.835991389 +0200
@@ -26,7 +26,7 @@
 	luxcorescenedemo.cpp
 	)
 
-add_executable(luxcorescenedemo ${LUXCORESCENEDEMO_SRCS})
+add_executable(luxcorescenedemo ${LUXCORESCENEDEMO_SRCS})
 add_definitions(${VISIBILITY_FLAGS})
 
-TARGET_LINK_LIBRARIES(luxcorescenedemo luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+TARGET_LINK_LIBRARIES(luxcorescenedemo luxcore smallluxgpu luxrays OpenGL::GLX TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG OpenCL::OpenCL OpenImageIO::OpenImageIO embree)
--- a/samples/luxcoreui/CMakeLists.txt	2022-10-18 19:08:30.945991706 +0200
+++ z/samples/luxcoreui/CMakeLists.txt	2022-10-18 19:08:39.837991389 +0200
@@ -16,23 +16,20 @@
 # limitations under the License.
 ################################################################################
 
-#############################################################################
-#
-# GLFW library
-#
-#############################################################################
-
-add_subdirectory(deps/glfw-3.1.1)
-include_directories(deps/glfw-3.1.1/include)
-include_directories(deps/nfd/include)
-
-#############################################################################
-#
-# luxcore UI binary
-#
-#############################################################################
 
-include_directories(deps/imgui-1.46)
+
+# glfw
+find_package(glfw3 REQUIRED)
+
+#nativefiledialog-extended
+find_package(nativefiledialog-extended REQUIRED)
+
+# imgui
+find_package(PkgConfig REQUIRED)
+#include(FindPkgConfig)
+pkg_check_modules(imgui REQUIRED imgui)
+
+include_directories(BEFORE SYSTEM ${imgui_INCLUDEDIR})
 
 set(LUXCOREUI_SRCS
 	luxcoreui.cpp
@@ -59,32 +60,9 @@
 	statswindow.cpp
 	imgui_impl_glfw.cpp
 	resources/luxlogo_bg.cpp
-	deps/imgui-1.46/imgui.cpp
-	deps/imgui-1.46/imgui_demo.cpp
-	deps/imgui-1.46/imgui_draw.cpp
-	deps/nfd/nfd_common.c
 	)
 
-IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-	SET(LUXCOREUI_SRCS ${LUXCOREUI_SRCS} deps/nfd/nfd_win.cpp)
-ENDIF()
-
-IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
-	SET(LUXCOREUI_SRCS ${LUXCOREUI_SRCS} deps/nfd/nfd_gtk.c)
-	add_definitions(${GTK3_CFLAGS_OTHER})
-ENDIF()
-
-IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-	SET(LUXCOREUI_SRCS ${LUXCOREUI_SRCS} deps/nfd/nfd_cocoa.m)
-ENDIF()
-
-add_executable(luxcoreui ${LUXCOREUI_SRCS})
-
-TARGET_LINK_LIBRARIES(luxcoreui
-	glfw
-	${GLFW_LIBRARIES}
-	luxcore smallluxgpu luxrays
-	${EMBREE_LIBRARY}
-	${OPENGL_LIBRARIES}
-	${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES}
-	${GTK3_LIBRARIES})
+add_executable(luxcoreui ${LUXCOREUI_SRCS})
+
+TARGET_LINK_LIBRARIES(luxcoreui luxcore smallluxgpu luxrays glfw imgui ${nativefiledialog-extended_LIBRARIES} Boost::chrono OpenCL::OpenCL OpenImageIO::OpenImageIO embree TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG OpenGL::GL ${GTK3_LIBRARIES})
+
--- a/samples/smallluxgpu4/CMakeLists.txt	2022-10-18 19:08:30.952991706 +0200
+++ z/samples/smallluxgpu4/CMakeLists.txt	2022-10-18 19:08:39.837991389 +0200
@@ -27,16 +27,16 @@
 	displayfunc.cpp
 	)
 
-add_executable(slg4 ${SMALLLUXGPU_SRCS})
+add_executable(slg4 ${SMALLLUXGPU_SRCS})
 
 if(APPLE)
-	TARGET_LINK_LIBRARIES(slg4 luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${OPENGL_LIBRARIES} ${GLEW_LIBRARY} ${GLUT_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+	TARGET_LINK_LIBRARIES(slg4 luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${OPENGL_LIBRARIES} ${GLEW_LIBRARY} ${GLUT_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
 else(APPLE)
-	TARGET_LINK_LIBRARIES(slg4 luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${OPENGL_LIBRARIES} ${GLEW_LIBRARY} ${GLUT_LIBRARY} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+	TARGET_LINK_LIBRARIES(slg4 luxcore smallluxgpu luxrays OpenGL::GL GLEW::GLEW glut TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG OpenCL::OpenCL OpenImageIO::OpenImageIO embree glut)
 endif(APPLE)
 
 # This instructs FREEGLUT to emit a pragma for the static version
-SET_TARGET_PROPERTIES(slg4 PROPERTIES COMPILE_DEFINITIONS FREEGLUT_STATIC)
+SET_TARGET_PROPERTIES(slg4 PROPERTIES COMPILE_DEFINITIONS FREEGLUT_STATIC)
 
 IF(OSX_UPDATE_LUXRAYS_REPO)
 #
--- a/src/luxcore/CMakeLists.txt	2022-10-18 19:08:30.995991704 +0200
+++ z/src/luxcore/CMakeLists.txt	2022-10-18 19:08:39.877991388 +0200
@@ -133,25 +133,29 @@
 #
 ################################################################################
 
+if(LUXRAYS_PYTHON)
+
 set(PYLUXCORE_SRCS
 	${LuxRays_SOURCE_DIR}/src/luxcore/pyluxcore.cpp
 	${LuxRays_SOURCE_DIR}/src/luxcore/pyluxcoreforblender.cpp
 )
 
-add_library(pyluxcore MODULE ${PYLUXCORE_SRCS})
+add_library(pyluxcore MODULE ${PYLUXCORE_SRCS})
 add_definitions(${VISIBILITY_FLAGS})
 if(APPLE)
-	target_link_libraries(pyluxcore -Wl,-undefined -Wl,dynamic_lookup luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${Boost_LIBRARIES} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
-    SET_TARGET_PROPERTIES(pyluxcore PROPERTIES XCODE_ATTRIBUTE_DEPLOYMENT_POSTPROCESSING NO) # exclude pylux from strip, not possible
+	target_link_libraries(pyluxcore -Wl,-undefined -Wl,dynamic_lookup luxcore smallluxgpu luxrays embree TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG)
+    SET_TARGET_PROPERTIES(pyluxcore PROPERTIES XCODE_ATTRIBUTE_DEPLOYMENT_POSTPROCESSING NO) # exclude pylux from strip, not possible
 else()
-	target_link_libraries(pyluxcore luxcore smallluxgpu luxrays ${EMBREE_LIBRARY} ${Boost_LIBRARIES} ${TIFF_LIBRARIES} ${OPENEXR_LIBRARIES} ${PNG_LIBRARIES} ${JPEG_LIBRARIES})
+	target_link_libraries(pyluxcore luxcore smallluxgpu luxrays embree TIFF::TIFF OpenEXR::OpenEXR PNG::PNG JPEG::JPEG Python::Python)
 endif()
 
-set_target_properties(pyluxcore PROPERTIES PREFIX "")
+set_target_properties(pyluxcore PROPERTIES PREFIX "")
 if(MSVC)
-	set_target_properties(pyluxcore PROPERTIES SUFFIX ".pyd")
+	set_target_properties(pyluxcore PROPERTIES SUFFIX ".pyd")
 endif(MSVC)
 
+endif(LUXRAYS_PYTHON)
+
 ################################################################################
 #
 # Predefines
--- a/src/luxrays/CMakeLists.txt	2022-10-18 19:08:30.996991704 +0200
+++ z/src/luxrays/CMakeLists.txt	2022-10-18 19:08:39.879991388 +0200
@@ -233,12 +233,10 @@
 	SET_SOURCE_FILES_PROPERTIES(${LuxRays_SOURCE_DIR}/src/luxrays/accelerators/mqbvhaccel.cpp COMPILE_FLAGS "-O2")
 ENDIF(GCC AND NOT APPLE)
 
-TARGET_LINK_LIBRARIES(luxrays ${Boost_LIBRARIES})
-TARGET_LINK_LIBRARIES(luxrays ${OPENIMAGEIO_LIBRARIES})
+TARGET_LINK_LIBRARIES(luxrays OpenImageIO::OpenImageIO Boost::thread Boost::filesystem Boost::iostreams Boost::serialization)
 
 IF (NOT LUXRAYS_DISABLE_OPENCL)
-	TARGET_LINK_LIBRARIES(luxrays ${OPENGL_gl_LIBRARY})
-	TARGET_LINK_LIBRARIES(luxrays ${OPENCL_LIBRARIES})
+	TARGET_LINK_LIBRARIES(luxrays OpenCL::OpenCL)
 ENDIF(NOT LUXRAYS_DISABLE_OPENCL)
 
 ###########################################################################
